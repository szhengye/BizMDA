package ${mda.packageName}.${module}.controller;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.jeecg.common.api.vo.Result;
import org.jeecg.common.system.query.QueryGenerator;
import org.jeecg.common.util.oConvertUtils;
import ${mda.packageName}.${module}.entity.${className};
import ${mda.packageName}.${module}.service.I${className}Service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.extern.slf4j.Slf4j;

import org.jeecgframework.poi.excel.ExcelImportUtil;
import org.jeecgframework.poi.excel.def.NormalExcelConstants;
import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.ImportParams;
import org.jeecgframework.poi.excel.view.JeecgEntityExcelView;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import com.alibaba.fastjson.JSON;

/**
 * ${label}
 *
 * @author ${mda.author}
 * @email ${mda.email}
 * @date ${mda.datetime}
 * @version ${mda.version}
 */
@RestController
@RequestMapping("/${module}/${classname}")
@Slf4j
public class ${className}Controller {
    @Autowired
    private I${className}Service ${classname}Service;

    /**
      * 分页列表查询
     * @param ${classname}
     * @param pageNo
     * @param pageSize
     * @param req
     * @return
     */
    @GetMapping(value = "/list")
    public Result<IPage<${className}>> queryPageList(${className} ${classname},
                                             @RequestParam(name="pageNo", defaultValue="1") Integer pageNo,
                                             @RequestParam(name="pageSize", defaultValue="10") Integer pageSize,
                                             HttpServletRequest req) {
        Result<IPage<${className}>> result = new Result<IPage<${className}>>();
        QueryWrapper<${className}> queryWrapper = QueryGenerator.initQueryWrapper(${classname}, req.getParameterMap());
        Page<${className}> page = new Page<${className}>(pageNo, pageSize);
        IPage<${className}> pageList = ${classname}Service.page(page, queryWrapper);
        result.setSuccess(true);
        result.setResult(pageList);
        return result;
    }

    /**
      *   添加
     * @param ${classname}
     * @return
     */
    @PostMapping(value = "/add")
    public Result<${className}> add(@RequestBody ${className} ${classname}) {
        Result<${className}> result = new Result<${className}>();
        try {
            ${classname}Service.save(${classname});
            result.success("添加成功！");
        } catch (Exception e) {
            e.printStackTrace();
            log.info(e.getMessage());
            result.error500("操作失败");
        }
        return result;
    }

    /**
      *  编辑
     * @param ${classname}
     * @return
     */
    @PutMapping(value = "/edit")
    public Result<${className}> edit(@RequestBody ${className} ${classname}) {
        Result<${className}> result = new Result<${className}>();
        ${className} ${classname}Entity = ${classname}Service.getById(${classname}.get${primaryKeyField.className}());
        if(${classname}Entity==null) {
            result.error500("未找到对应实体");
        }else {
            boolean ok = ${classname}Service.updateById(${classname});
            //TODO 返回false说明什么？
            if(ok) {
                result.success("修改成功!");
            }
        }

        return result;
    }

#if($foreignKeyTableList.size() > 0)
    /**
     * 添加
     *
     * @param ${classname}
     * @return
     */
    @PostMapping(value = "/addMain")
    public Result<${className}> addMain(@RequestBody ${className} ${classname}) {
        Result<${className}> result = new Result<${className}>();
        try {
            ${classname}Service.saveMain(${classname});
            result.success("添加成功！");
        } catch (Exception e) {
            e.printStackTrace();
            log.info(e.getMessage());
            result.error500("操作失败");
        }
        return result;
    }

    /**
     * 编辑
     *
     * @param ${classname}
     * @return
     */
    @PutMapping(value = "/editMain")
    public Result<${className}> eidtMain(@RequestBody ${className} ${classname}) {
        Result<${className}> result = new Result<${className}>();
        ${className} ${classname}Entity = ${classname}Service.getById(${classname}.get${primaryKeyField.className}());
        if (${classname}Entity == null) {
            result.error500("未找到对应实体");
        } else {
            ${classname}Service.updateMain(${classname});
            result.success("修改成功!");
        }

        return result;
    }
#end

    /**
      *   通过id删除
     * @param id
     * @return
     */
    @DeleteMapping(value = "/delete")
    public Result<${className}> delete(@RequestParam(name="id",required=true) String id) {
        Result<${className}> result = new Result<${className}>();
        ${className} ${classname} = ${classname}Service.getById(id);
        if(${classname}==null) {
            result.error500("未找到对应实体");
        }else {
            boolean ok = ${classname}Service.removeById(id);
            if(ok) {
                result.success("删除成功!");
            }
        }

        return result;
    }

    /**
      *  批量删除
     * @param ids
     * @return
     */
    @DeleteMapping(value = "/deleteBatch")
    public Result<${className}> deleteBatch(@RequestParam(name="ids",required=true) String ids) {
        Result<${className}> result = new Result<${className}>();
        if(ids==null || "".equals(ids.trim())) {
            result.error500("参数不识别！");
        }else {
            this.${classname}Service.removeByIds(Arrays.asList(ids.split(",")));
            result.success("删除成功!");
        }
        return result;
    }

    /**
      * 通过id查询
     * @param id
     * @return
     */
    @GetMapping(value = "/queryById")
    public Result<${className}> queryById(@RequestParam(name="id",required=true) String id) {
        Result<${className}> result = new Result<${className}>();
    ${className} ${classname} = ${classname}Service.getById(id);
        if(${classname}==null) {
            result.error500("未找到对应实体");
        }else {
            result.setResult(${classname});
            result.setSuccess(true);
        }
        return result;
    }

#foreach ($field in $fields)
#if($field.primaryKeyTableName)
    /**
     * 通过id查询
     *
     * @param id
     * @return
     */
    @GetMapping(value = "/query${className}ListBy${field.className}")
    public Result<List<${className}>> query${className}ListBy${field.className}(@RequestParam(name = "id", required = true) String id) {
        Result<List<${className}>> result = new Result<List<${className}>>();
        List<${className}> ${classname}List = ${classname}Service.select${className}sBy${field.className}(id);
        result.setResult(${classname}List);
        result.setSuccess(true);
        return result;
    }
    #end
    #end

    /**
        * 导出excel
     *
     * @param request
     * @param response
     */
    @RequestMapping(value = "/exportXls")
    public ModelAndView exportXls(HttpServletRequest request, HttpServletResponse response) {
        // Step.1 组装查询条件
        QueryWrapper<${className}> queryWrapper = null;
        try {
            String paramsStr = request.getParameter("paramsStr");
            if (oConvertUtils.isNotEmpty(paramsStr)) {
                String deString = URLDecoder.decode(paramsStr, "UTF-8");
                ${className} ${classname} = JSON.parseObject(deString, ${className}.class);
                queryWrapper = QueryGenerator.initQueryWrapper(${classname}, request.getParameterMap());
            }
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        //Step.2 AutoPoi 导出Excel
        ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
        List<${className}> pageList = ${classname}Service.list(queryWrapper);
        //导出文件名称
        mv.addObject(NormalExcelConstants.FILE_NAME, "${label}列表}");
        mv.addObject(NormalExcelConstants.CLASS, ${className}.class);
        mv.addObject(NormalExcelConstants.PARAMS, new ExportParams("$label}列表数据", "导出人:BizMDA", "导出信息"));
        mv.addObject(NormalExcelConstants.DATA_LIST, pageList);
        return mv;
    }

    /**
        * 通过excel导入数据
     *
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value = "/importExcel", method = RequestMethod.POST)
    public Result<?> importExcel(HttpServletRequest request, HttpServletResponse response) {
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();
        for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) {
            MultipartFile file = entity.getValue();// 获取上传文件对象
            ImportParams params = new ImportParams();
            params.setTitleRows(2);
            params.setHeadRows(1);
            params.setNeedSave(true);
            try {
                List<${className}> list${className}s = ExcelImportUtil.importExcel(file.getInputStream(), ${className}.class, params);
                for (${className} ${classname}Excel : list${className}s) {
                    ${classname}Service.save(${classname}Excel);
                }
                return Result.ok("文件导入成功！数据行数：" + list${className}s.size());
            } catch (Exception e) {
                log.error(e.getMessage());
                return Result.error("文件导入失败！");
            } finally {
                try {
                    file.getInputStream().close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return Result.ok("文件导入失败！");
    }

}
