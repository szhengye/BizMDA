#foreach ($component in $components)
  #if(${component.type} == "MODAL")
    #set($modal_component = $component)
    #break
  #end
#end

<template>
    <a-modal
            :title="title"
            :width="800"
            :visible="visible"
            :confirmLoading="confirmLoading"
            @ok="handleOk"
            @cancel="handleCancel"
            cancelText="关闭">

        <a-spin :spinning="confirmLoading">
            <a-form :form="form">
#foreach($field in $modal_component.fields)
                <a-form-item
                        :labelCol="labelCol"
                        :wrapperCol="wrapperCol"
                        label="${field.label}"
                        hasFeedback >
                    <a-input #if(${field.view.placeholder}) placeholder="${field.view.placeholder}"#end v-decorator="['${field.classname}', {}]" />
                </a-form-item>
#end
            </a-form>
        </a-spin>
    </a-modal>
</template>

<script>
    import { httpAction } from '@/api/manage'
    import pick from 'lodash.pick'
    import moment from "moment"

    export default {
        name: "${className}Modal}",
        data () {
            return {
                title:"操作",
                visible: false,
                model: {},
                labelCol: {
                    xs: { span: 24 },
                    sm: { span: 5 },
                },
                wrapperCol: {
                    xs: { span: 24 },
                    sm: { span: 16 },
                },

                confirmLoading: false,
                form: this.$form.createForm(this),
                validatorRules:{
                },
                url: {
                    add: "/${module}/${list_component.classname}/add",
                    edit: "/${module}/${list_component.classname}/edit",
                },
            }
        },
        created () {
        },
        methods: {
            add () {
                this.edit({});
            },
            edit (record) {
                this.form.resetFields();
                this.model = Object.assign({}, record);
                this.visible = true;
                this.$nextTick(() => {
#foreach($field in $modal_component.fields)
                    #if(${field.type} == "datetime")
                        this.form.setFieldsValue({${field.classname}:this.model.${field.classname}?moment(this.model.${field.classname},'YYYY-MM-DD HH:mm:ss'):null})
                    #elseif(${field.type} == "date")
                        this.form.setFieldsValue({${field.classname}:this.model.${field.classname}?moment(this.model.${field.classname}):null})
                    #else
                        this.form.setFieldsValue({${field.classname}:this.model.${field.classname}})
                    #end
#end
                });

            },
            close () {
                this.$emit('close');
                this.visible = false;
            },
            handleOk () {
                const that = this;
                // 触发表单验证
                this.form.validateFields((err, values) => {
                    if (!err) {
                        that.confirmLoading = true;
                        let httpurl = '';
                        let method = '';
                        if(!this.model.${modal_component.primaryKeyField.classname}){
                            httpurl+=this.url.add;
                            method = 'post';
                        }else{
                            httpurl+=this.url.edit;
                            method = 'put';
                        }
                        let formData = Object.assign(this.model, values);
                        //时间格式化
#foreach($field in $modal_component.fields)
                      #if(${field.type} == "datetime")
                          formData.${field.classname} = formData.${field.classname}?formData.${field.classname}.format('YYYY-MM-DD HH:mm:ss'):null;
                      #elseif(${field.type} == "date")
                          formData.${field.classname} = formData.${field.classname}?formData.${field.classname}.format():null;
                      #else
                      #end
#end
                        console.log(formData)
                        httpAction(httpurl,formData,method).then((res)=>{
                            if(res.success){
                                that.${usd}message.success(res.message);
                                that.${usd}emit('ok');
                            }else{
                                that.${usd}message.warning(res.message);
                            }
                        }).finally(() => {
                            that.confirmLoading = false;
                            that.close();
                        })



                    }
                })
            },
            handleCancel () {
                this.close()
            },


        }
    }
</script>

<style scoped>

</style>