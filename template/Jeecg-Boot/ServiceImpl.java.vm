package ${mda.packageName}.${module}.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${mda.packageName}.${module}.mapper.${className}Mapper;
import ${mda.packageName}.${module}.entity.${className};
import ${mda.packageName}.${module}.service.I${className}Service;
#foreach($foreignKeyTable in $foreignKeyTableList)

import ${mda.packageName}.${module}.mapper.${foreignKeyTable.table.className}Mapper;
import ${mda.packageName}.${module}.entity.${foreignKeyTable.table.className};
import ${mda.packageName}.${module}.service.I${foreignKeyTable.table.className}Service;
#end

import org.springframework.transaction.annotation.Transactional;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;

/**
 * ${label}
 *
 * @author ${mda.author}
 * @email ${mda.email}
 * @date ${mda.datetime}
 * @version ${mda.version}
 */
@Service
public class ${className}ServiceImpl extends ServiceImpl<${className}Mapper, ${className}> implements I${className}Service {
      @Autowired
      private ${className}Mapper ${classname}Mapper;
  #foreach($foreignKeyTable in $foreignKeyTableList)

      @Autowired
      private ${foreignKeyTable.table.className}Mapper ${foreignKeyTable.table.classname}Mapper;
  #end

  #set($flag = true)
  #foreach ($field in $fields)
    #if($field.primaryKeyTableName)
      #if($flag)
      #set($flag = false)
    #end

        @Override
        public List<${className}> select${className}sBy${field.className}(String ${field.classname}) {
            return ${classname}Mapper.select${className}sBy${field.className}(${field.classname});
        }
    #end
  #end

#if($foreignKeyTableList.size() > 0)

    @Override
    @Transactional
    public void saveMain(${className} ${classname}) {
        ${classname}Mapper.insert(${classname});
#foreach($foreignKeyTable in $foreignKeyTableList)

        if (${classname}.get${foreignKeyTable.table.className}List() != null) {
            for (${foreignKeyTable.table.className} entity : ${classname}.get${foreignKeyTable.table.className}List()) {
                entity.set${foreignKeyTable.field.className}(${classname}.get${primaryKeyField.className}());
                ${foreignKeyTable.table.classname}Mapper.insert(entity);
            }
        }
#end

    }

    @Override
    @Transactional
    public void updateMain(${className} ${classname}) {
        ${classname}Mapper.updateById(${classname});
#foreach($foreignKeyTable in $foreignKeyTableList)

        //1.先删除子表数据
        ${foreignKeyTable.table.classname}Mapper.delete${foreignKeyTable.table.className}sBy${foreignKeyTable.field.className}(${classname}.get${primaryKeyField.className}());

        //2.子表数据重新插入
        if (${classname}.get${foreignKeyTable.table.className}List() != null) {
            for (${foreignKeyTable.table.className} entity : ${classname}.get${foreignKeyTable.table.className}List()) {
                entity.set${foreignKeyTable.field.className}(${classname}.get${primaryKeyField.className}());
                ${foreignKeyTable.table.classname}Mapper.insert(entity);
            }
        }
#end

    }

    @Override
    @Transactional
    public void delMain(String id) {
        ${classname}Mapper.deleteById(id);
#foreach($foreignKeyTable in $foreignKeyTableList)

        ${foreignKeyTable.table.classname}Mapper.delete${foreignKeyTable.table.className}sBy${foreignKeyTable.field.className}(id);
#end

    }

    @Override
    @Transactional
    public void delBatchMain(Collection<? extends Serializable> idList) {
        for(Serializable id:idList) {
            ${classname}Mapper.deleteById(id);
          #foreach($foreignKeyTable in $foreignKeyTableList)

              ${foreignKeyTable.table.classname}Mapper.delete${foreignKeyTable.table.className}sBy${foreignKeyTable.field.className}(id.toString());
          #end

        }
    }
#end

}